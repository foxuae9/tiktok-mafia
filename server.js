const express = require("express");
const http = require("http");
const { Server } = require("socket.io");
const cors = require("cors");

const app = express();
app.use(cors({
  origin: "https://www.foxuae35.com",
  credentials: true
}));

const server = http.createServer(app);

const io = new Server(server, {
  cors: {
    origin: "https://www.foxuae35.com",
    methods: ["GET", "POST"],
    credentials: true
  },
  transports: ["websocket", "polling"] 
});

// ุชุฎุฒูู ุงูุบุฑู
const rooms = new Map();

// ุฅุถุงูุฉ ููุทุฉ ููุงูุฉ ููุชุญูู ูู ุญุงูุฉ ุงูุณูุฑูุฑ
app.get("/health", (req, res) => {
  res.json({ status: "ok", connections: io.engine.clientsCount });
});

io.on("connection", (socket) => {
  console.log("๐ข ุนููู ุฌุฏูุฏ ูุชุตู!", socket.id);

  // ุฅุฑุณุงู ุชุฃููุฏ ุงูุงุชุตุงู ููุนููู
  socket.emit("connected", { 
    message: "ุชู ุงูุงุชุตุงู ุจุงูุณูุฑูุฑ ุจูุฌุงุญ",
    socketId: socket.id 
  });

  // ุฅูุดุงุก ุบุฑูุฉ ุฌุฏูุฏุฉ
  socket.on("create-room", ({ username }) => {
    try {
      console.log("ูุญุงููุฉ ุฅูุดุงุก ุบุฑูุฉ ุฌุฏูุฏุฉ ูู ูุจู:", username);
      
      // ุฅูุดุงุก ูุนุฑู ูุฑูุฏ ููุบุฑูุฉ
      const roomId = Math.random().toString(36).substring(2, 8).toUpperCase();
      
      // ุฅูุดุงุก ูุงุฆู ุงูุบุฑูุฉ
      const room = {
        id: roomId,
        host: socket.id,
        players: [{
          id: socket.id,
          username,
          isHost: true
        }]
      };
      
      // ุชุฎุฒูู ุงูุบุฑูุฉ
      rooms.set(roomId, room);
      
      // ุฅุถุงูุฉ ุงูุณูููุช ุฅูู ุงูุบุฑูุฉ
      socket.join(roomId);
      
      // ุฅุฑุณุงู ูุนูููุงุช ุงูุบุฑูุฉ ูููุถูู
      socket.emit("room-created", { 
        roomId,
        message: "ุชู ุฅูุดุงุก ุงูุบุฑูุฉ ุจูุฌุงุญ"
      });
      
      console.log("๐ฏ ุชู ุฅูุดุงุก ุบุฑูุฉ ุฌุฏูุฏุฉ:", roomId);
    } catch (error) {
      console.error("โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุบุฑูุฉ:", error);
      socket.emit("error", { 
        message: "ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก ุงูุบุฑูุฉ"
      });
    }
  });

  socket.on("disconnect", () => {
    console.log("๐ ุงูุนููู ูุตู ุงูุงุชุตุงู:", socket.id);
    
    // ุงูุจุญุซ ุนู ุงูุบุฑูุฉ ุงูุชู ูุงู ูููุง ุงูุนููู
    for (const [roomId, room] of rooms.entries()) {
      const playerIndex = room.players.findIndex(p => p.id === socket.id);
      
      if (playerIndex !== -1) {
        // ุฅุฒุงูุฉ ุงููุงุนุจ ูู ุงูุบุฑูุฉ
        room.players.splice(playerIndex, 1);
        
        if (room.players.length === 0) {
          // ุฅุฐุง ูู ูุชุจู ูุงุนุจููุ ุงุญุฐู ุงูุบุฑูุฉ
          rooms.delete(roomId);
          console.log("๐๏ธ ุชู ุญุฐู ุงูุบุฑูุฉ:", roomId);
        } else {
          // ุฅุฐุง ูุงู ุงููุบุงุฏุฑ ูู ุงููุถููุ ุนูู ูุถูู ุฌุฏูุฏ
          if (room.host === socket.id) {
            room.host = room.players[0].id;
            room.players[0].isHost = true;
            console.log("๐ ุชู ุชุนููู ูุถูู ุฌุฏูุฏ ูู ุงูุบุฑูุฉ:", roomId);
          }
        }
        
        // ุฅุฎุทุงุฑ ุจุงูู ุงููุงุนุจูู
        io.to(roomId).emit("players-update", {
          players: room.players
        });
        break;
      }
    }
  });
});

const PORT = process.env.PORT || 10000;
server.listen(PORT, () => {
  console.log(`๐ ุงูุณูุฑูุฑ ุดุบุงู ุนูู ุงููููุฐ ${PORT}`);
});
