import mongoose from 'mongoose';

const MONGODB_URI = process.env.MONGODB_URI;

if (!MONGODB_URI) {
  throw new Error(
    'ูุฑุฌู ุชุญุฏูุฏ MONGODB_URI ูู ููู .env'
  );
}

let cached = global.mongoose;

if (!cached) {
  cached = global.mongoose = { conn: null, promise: null };
}

async function dbConnect() {
  console.log('๐ ุจุฏุก ูุญุงููุฉ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช...');
  
  if (cached.conn) {
    console.log('โ ุงุณุชุฎุฏุงู ุงุชุตุงู ููุฌูุฏ ุจุงููุนู');
    return cached.conn;
  }

  if (!cached.promise) {
    const opts = {
      bufferCommands: false,
      serverSelectionTimeoutMS: 10000, // ุฒูุงุฏุฉ ูููุฉ ุงูุงุชุตุงู
      family: 4
    };

    console.log('๐ ุฅูุดุงุก ุงุชุตุงู ุฌุฏูุฏ...');
    try {
      cached.promise = mongoose.connect(MONGODB_URI, opts);
      console.log('โ ุชู ุฅูุดุงุก ูุนุฏ ุงูุงุชุตุงู ุจูุฌุงุญ');
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุงุชุตุงู:', error);
      throw error;
    }
  } else {
    console.log('โณ ุงุณุชุฎุฏุงู ูุนุฏ ุงุชุตุงู ููุฌูุฏ');
  }

  try {
    cached.conn = await cached.promise;
    console.log('โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ');
    return cached.conn;
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
    cached.promise = null; // ุฅุนุงุฏุฉ ุชุนููู ุงููุนุฏ ูู ุญุงูุฉ ุงููุดู
    throw error;
  }
}

export default dbConnect;
